apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

afterEvaluate {
    def plugins = project.getPlugins()
    def isAndroid = plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')
    if (!isAndroid) {
        java {
            withJavadocJar()
            withSourcesJar()
        }
    }
    publishing {
        publications {
            if (!isAndroid) {
                mavenJava(MavenPublication) {

                    from components.java

                    groupId = GROUP
                    artifactId = POM_ARTIFACT_ID
                    version = VERSION_NAME

                    pom {
                        name = POM_NAME
                        packaging = "pom"
                        description = POM_DESCRIPTION
                        url = POM_URL
                        scm {
                            url = POM_SCM_URL
                            connection = POM_SCM_CONNECTION
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }
                        licenses {
                            license {
                                name = POM_LICENCE_NAME
                                url = POM_LICENCE_URL
                                distribution = POM_LICENCE_DIST
                            }
                        }
                        developers {
                            developer {
                                id = POM_DEVELOPER_ID
                                name = POM_DEVELOPER_NAME
                            }
                        }
                    }
                }
            } else {
                mavenAar(MavenPublication) {
                    from components.release

                    groupId = GROUP
                    artifactId = POM_ARTIFACT_ID
                    version = VERSION_NAME

                    pom {
                        name = POM_NAME
                        packaging = "pom"
                        description = POM_DESCRIPTION
                        url = POM_URL
                        scm {
                            url = POM_SCM_URL
                            connection = POM_SCM_CONNECTION
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }
                        licenses {
                            license {
                                name = POM_LICENCE_NAME
                                url = POM_LICENCE_URL
                                distribution = POM_LICENCE_DIST
                            }
                        }
                        developers {
                            developer {
                                id = POM_DEVELOPER_ID
                                name = POM_DEVELOPER_NAME
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = getReleaseRepositoryUrl()
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() }
        sign publishing.publications
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}
